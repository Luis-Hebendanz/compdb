#compdef compdb

# ZSH completion for compdb

(( $+functions[__compdb-help] )) ||
_compdb-help() {
  _arguments '(- :)'{-h,--help}'[show help message and exit]'
}

(( $+functions[_compdb-version] )) ||
_compdb-version() {
  _arguments -C \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '--short[machine readable version]'
}

(( $+functions[_compdb-list] )) ||
_compdb-list() {
  _arguments \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-1 --unique)'{-1,--unique}'[restrict results to a single entry per file]' \
    '(-)*:source file:_files -g \*.\(c\|h\|cc\|hh\|cpp\|hpp\|cxx\|hxx\|c\+\+\|h\+\+\)'
}

(( $+functions[__compdb_commands] )) ||
_compdb_commands() {
  local -a commands

  commands=(
    help:"display this help"
    list:"list database entries"
    version:"display this version of compdb"
  )

  _describe -t compdb-commands "command" commands
}

_compdb() {
  local -a base_opts
  base_opts=(
    '(- :)'{-h,--help}'[show help message and exit]'
    '*-p[build path]:build directory:_files -/'
    '--trace[trace execution]'
  )

  local curcontext="$curcontext" state line
  typeset -A opt_args
  _arguments -C -S : \
             "${base_opts[@]}" \
             '(-): :_compdb_commands' \
             '(-)*:: :->option-or-argument' && return

  # complete <command> arguments
  # if a function exists _compdb-<command> call it,
  # otherwise do like git and use 'use-fallback'
  if [[ $state = option-or-argument ]]; then
    integer ret=1
    curcontext=${curcontext%:*:*}:compdb-$words[1]:

    if ! _call_function ret _compdb-$words[1]; then
      if zstyle -T :completion:$curcontext: use-fallback; then
        _default && ret=0
      else
        _message "unknown command: $words[1]"
      fi
    fi
    return $ret
  fi

  return 0
}

_compdb "$@"

# Local Variables:
# mode: Shell-Script
# sh-indentation: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# End:
# vim: ft=zsh sw=2 ts=2 et
